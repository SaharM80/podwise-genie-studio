import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Label } from "@/components/ui/label";
import { Mic, FileText, Download, Play, Loader2 } from "lucide-react";
import { Navigation } from "@/components/ui/navigation";
import { useToast } from "@/hooks/use-toast";

type OutputType = "audio" | "transcript" | "both";

export default function Generate() {
  const [prompt, setPrompt] = useState("");
  const [outputType, setOutputType] = useState<OutputType>("both");
  const [isGenerating, setIsGenerating] = useState(false);
  const [result, setResult] = useState<{
    transcript?: string;
    audioUrl?: string;
  } | null>(null);
  const { toast } = useToast();

  const handleGenerate = async () => {
    if (!prompt.trim()) {
      toast({
        title: "Please enter a prompt",
        description: "Describe what you'd like your podcast to be about.",
        variant: "destructive"
      });
      return;
    }

    setIsGenerating(true);
    
    try {
      // Simulate API calls - replace with actual backend endpoints
      if (outputType === "transcript" || outputType === "both") {
        // const transcriptResponse = await fetch('/api/generate_transcript', {
        //   method: 'POST',
        //   body: JSON.stringify({ prompt })
        // });
        
        // Simulated response
        await new Promise(resolve => setTimeout(resolve, 3000));
        setResult(prev => ({
          ...prev,
          transcript: `This is a simulated transcript for: "${prompt}". In a real implementation, this would be generated by your FastAPI backend endpoint /generate_transcript.`
        }));
      }
      
      if (outputType === "audio" || outputType === "both") {
        // const audioResponse = await fetch('/api/generate_podcast', {
        //   method: 'POST',
        //   body: JSON.stringify({ prompt })
        // });
        
        // Simulated response
        await new Promise(resolve => setTimeout(resolve, 2000));
        setResult(prev => ({
          ...prev,
          audioUrl: "https://example.com/audio.mp3" // Replace with actual audio URL
        }));
      }
      
      toast({
        title: "Success!",
        description: "Your podcast has been generated successfully."
      });
      
    } catch (error) {
      toast({
        title: "Generation failed",
        description: "There was an error generating your podcast. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-secondary">
      <Navigation />
      
      <div className="container mx-auto px-6 py-12">
        <div className="max-w-4xl mx-auto">
          <div className="text-center mb-12">
            <h1 className="text-4xl md:text-5xl font-bold mb-4 bg-gradient-to-r from-primary to-primary-glow bg-clip-text text-transparent">
              Generate Your Podcast
            </h1>
            <p className="text-xl text-muted-foreground">
              Describe your idea and let AI create a professional podcast for you
            </p>
          </div>

          <div className="grid lg:grid-cols-2 gap-8">
            {/* Input Section */}
            <Card className="shadow-card border-border/50">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Mic className="h-5 w-5 text-primary" />
                  Podcast Settings
                </CardTitle>
                <CardDescription>
                  Configure your podcast generation preferences
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div>
                  <Label htmlFor="prompt" className="text-base font-medium mb-3 block">
                    Podcast Topic & Description
                  </Label>
                  <Textarea
                    id="prompt"
                    placeholder="Describe what you want your podcast to be about. Be specific about the topic, tone, and any key points you want covered..."
                    value={prompt}
                    onChange={(e) => setPrompt(e.target.value)}
                    className="min-h-32 resize-none border-border/50 focus:border-primary transition-smooth"
                  />
                </div>

                <div>
                  <Label className="text-base font-medium mb-4 block">
                    Output Type
                  </Label>
                  <RadioGroup value={outputType} onValueChange={(value) => setOutputType(value as OutputType)}>
                    <div className="flex items-center space-x-2 p-3 rounded-lg border border-border/50 hover:border-primary/50 transition-smooth">
                      <RadioGroupItem value="transcript" id="transcript" />
                      <Label htmlFor="transcript" className="flex items-center gap-2 cursor-pointer flex-1">
                        <FileText className="h-4 w-4 text-primary" />
                        Transcript Only
                      </Label>
                    </div>
                    <div className="flex items-center space-x-2 p-3 rounded-lg border border-border/50 hover:border-primary/50 transition-smooth">
                      <RadioGroupItem value="audio" id="audio" />
                      <Label htmlFor="audio" className="flex items-center gap-2 cursor-pointer flex-1">
                        <Mic className="h-4 w-4 text-primary" />
                        Audio Only
                      </Label>
                    </div>
                    <div className="flex items-center space-x-2 p-3 rounded-lg border border-primary/50 bg-primary/5 transition-smooth">
                      <RadioGroupItem value="both" id="both" />
                      <Label htmlFor="both" className="flex items-center gap-2 cursor-pointer flex-1">
                        <div className="flex items-center gap-1">
                          <Mic className="h-4 w-4 text-primary" />
                          <FileText className="h-4 w-4 text-primary" />
                        </div>
                        Both Audio & Transcript
                        <span className="text-xs bg-primary text-primary-foreground px-2 py-1 rounded-full ml-auto">
                          Recommended
                        </span>
                      </Label>
                    </div>
                  </RadioGroup>
                </div>

                <Button 
                  onClick={handleGenerate} 
                  disabled={isGenerating || !prompt.trim()}
                  className="w-full gradient-primary shadow-elegant hover:shadow-glow transition-smooth text-lg py-6"
                >
                  {isGenerating ? (
                    <>
                      <Loader2 className="h-5 w-5 mr-2 animate-spin" />
                      Generating...
                    </>
                  ) : (
                    <>
                      <Mic className="h-5 w-5 mr-2" />
                      Generate Podcast
                    </>
                  )}
                </Button>
              </CardContent>
            </Card>

            {/* Results Section */}
            <Card className="shadow-card border-border/50">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Download className="h-5 w-5 text-primary" />
                  Generated Content
                </CardTitle>
                <CardDescription>
                  Your podcast results will appear here
                </CardDescription>
              </CardHeader>
              <CardContent>
                {isGenerating ? (
                  <div className="flex flex-col items-center justify-center py-12 text-center">
                    <div className="animate-pulse-glow gradient-primary rounded-full p-6 mb-4">
                      <Mic className="h-8 w-8 text-white" />
                    </div>
                    <p className="text-muted-foreground">
                      Generating your podcast content...
                    </p>
                  </div>
                ) : result ? (
                  <div className="space-y-6">
                    {result.transcript && (
                      <div>
                        <h3 className="font-semibold mb-3 flex items-center gap-2">
                          <FileText className="h-4 w-4 text-primary" />
                          Transcript
                        </h3>
                        <div className="bg-muted/50 rounded-lg p-4 max-h-48 overflow-y-auto">
                          <p className="text-sm leading-relaxed">{result.transcript}</p>
                        </div>
                        <Button variant="outline" size="sm" className="mt-2">
                          <Download className="h-4 w-4 mr-2" />
                          Download Transcript
                        </Button>
                      </div>
                    )}
                    
                    {result.audioUrl && (
                      <div>
                        <h3 className="font-semibold mb-3 flex items-center gap-2">
                          <Mic className="h-4 w-4 text-primary" />
                          Audio
                        </h3>
                        <div className="bg-muted/50 rounded-lg p-4">
                          <audio controls className="w-full mb-4">
                            <source src={result.audioUrl} type="audio/mpeg" />
                            Your browser does not support the audio element.
                          </audio>
                          <div className="flex gap-2">
                            <Button variant="outline" size="sm">
                              <Play className="h-4 w-4 mr-2" />
                              Play
                            </Button>
                            <Button variant="outline" size="sm">
                              <Download className="h-4 w-4 mr-2" />
                              Download Audio
                            </Button>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                ) : (
                  <div className="flex flex-col items-center justify-center py-12 text-center">
                    <div className="w-16 h-16 bg-muted rounded-full flex items-center justify-center mb-4">
                      <Mic className="h-8 w-8 text-muted-foreground" />
                    </div>
                    <p className="text-muted-foreground">
                      Enter a prompt and click generate to create your podcast
                    </p>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}